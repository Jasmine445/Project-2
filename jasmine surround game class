package surroundpack;

import surroundpack.Cell;
import java.util.Scanner;
public class Surround4Game {
    private Cell[][] board;
    private int player;
    private int size;

    private int row;
    private int col;
    public static boolean playerWon = false;
    Scanner scn = new Scanner(System.in);

    int playerWinCount = 0;
    public Surround4Game() {
        //super();
        board = new Cell[10][10];
        this.player = 1;
    }

public void reset() {
        for (int r = 0; r < 10; r++) {
            for (int c = 0; c < 10; c++)
                board[r][c] = null;
        }
    }


    public Cell getCell(int row, int col) {
        return board[row][col];
    }

    public int getCurrentPlayer() {
        return player;
    }

    public int nextPlayer() {
        //		player = player + 1;
        //		if (player == 2)
        //			player = 0;

        player = (player + 1) % 2;
  return -1;
}

    public boolean select(int row, int col) {
        if (board[row][col] == null) {  //|| (cats() && board[row][col].getPlayerNumber() != player)) {
            Cell c = new Cell(player);
            board[row][col] = c;
            return true;
        } else
            return false;
    }

    public boolean getWinner(){

            for (int row = 0; row < 10; row++)
                for (int col = 0; col < 10; col++)
                    if (board[row][col] != null) {
        }
                    return true;
                }

//
public int winnerName(){


                        return player;


  // System.out.println("The player has won " + playerWinCount + " time(s)");
   }
}
        // left-border case (excluding corners - check 3 sides only)
//        if (row != 0 && row != Surround4Panel.boardSize - 1 && col == 0)
//            if (board[row - 1][col] != null && board[row][col + 1] != null && board[row + 1][col] != null)
//                if (board[row - 1][col].getPlayerNumber() == board[row][col + 1].getPlayerNumber() &&
//                        board[row - 1][col].getPlayerNumber() == board[row + 1][col].getPlayerNumber())
//                    return player;






// bottom right

//    private boolean isSurrounded(Cell type, Cell other) {
//        for (int r = 0; r < size; r++) {
//            for (int c = 0; c < size; c++) {
//                if (board[r][c] == type) {
//                    int count = 0;
//                    int win_count = 0;
//                    //(c + " " + r);
//                    if ((r - 1) >= 0 && (r - 1) < size) {
//                        win_count++;
//                        if (board[r - 1][c] == other) {
//                            count++;
//                        }
//                    }
//
//                    if ((r + 1) >= 0 && (r + 1) < size) {
//                        win_count++;
//                        if (board[r + 1][c] == other) {
//                            count++;
//                        }
//                    }
//
//                    if ((c + 1) >= 0 && (c + 1) < size) {
//                        win_count++;
//                        if (board[r][c + 1] == other) {
//                            count++;
//                        }
//                    }
//
//                    if ((c - 1) >= 0 && (c - 1) < size) {
//                        win_count++;
//                        if (board[r][c - 1] == other) {
//                            count++;
//                        }
//                    }
//                    if (win_count == count) {
//                        return true;
//                    }
//                }
//            }
//        }
//        return false;


